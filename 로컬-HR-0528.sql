-- SUSAN 사원이 해당되는 사원의 사원이름, 부서번호, 부서명을 출력하시오.
-- (INNER JOIN = EMPLOYEES, DEPARTMENTS)
SELECT E.FIRST_NAME, D.DEPARTMENT_ID, D.DEPARTMENT_NAME FROM EMPLOYEES E, DEPARTMENTS D 
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID AND UPPER(E.FIRST_NAME) = UPPER('SUSAN');

SELECT DEPARTMENT_NAME FROM DEPARTMENTS
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE FIRST_NAME = 'Susan');

-- SUSAN, LEX 두사람의 월급을 출력할 것
SELECT FIRST_NAME, SALARY FROM EMPLOYEES WHERE FIRST_NAME IN ('Susan', 'Lex');

-- Susan 또는 Lex와 월급이 같은 직원의 이름, 업무, 급여를 출력하는 SELECT문을 작성하시오. (Susan, Lex는 제외)
SELECT FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES WHERE SALARY 
IN(SELECT SALARY FROM EMPLOYEES WHERE FIRST_NAME IN ('Susan', 'Lex'))
AND NOT UPPER(FIRST_NAME) IN ('SUSAN', 'LEX');

-- 30번 소속 직원들 중에서 급여를 가장 많이 받는 사원 보다 더 급여를 많이 받는 사람의
-- 이름, 급여를 출력하는 쿼리문 작성
SELECT FIRST_NAME, SALARY FROM EMPLOYEES 
WHERE SALARY > ALL (SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 30) ;

-- 테이블의 구조만 복사하기 
DROP TABLE EMP03;
CREATE TABLE EMP03 AS SELECT * FROM EMPLOYEES WHERE 1 = 0;
SELECT * FROM EMP03;
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'EMP03';

-- DEPARTMENTS 구조 복사 하시오. DEPT01 
DROP TABLE DEPT01;
CREATE TABLE DEPT01 AS SELECT * FROM DEPARTMENTS WHERE 1 = 0;
SELECT * FROM DEPT01;
INSERT INTO DEPT01 (SELECT * FROM DEPARTMENTS);

-- 10번 부서의 지역번호를 40번 부서의 지역번호로 변경하기 위해서 서브 쿼리를 사용할 것
SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID = 10;
SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID = 40;
UPDATE DEPARTMENTS 
SET LOCATION_ID = (SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID = 10)
WHERE DEPARTMENT_ID = 40;

-- TRANSACTION 테스팅
COMMIT; -- 트랜잭션이 끝남과 동시에 새로 트랜잭션이 새로 시작함.
DROP TABLE PEPT02;
CREATE TABLE DEPT02
AS 
(SELECT * FROM DEPARTMENTS);
SELECT * FROM DEPT02;
DELETE FROM DEPT02; -- DROP과 TRUNCATE와 DELETE차이점 구분 
SELECT * FROM DEPT02;
ROLLBACK;