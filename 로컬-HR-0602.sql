-- 저장프로시저 = 함수로 생각할 것
CREATE OR REPLACE PROCEDURE EMP_PROCEDURE
IS 
    -- 임의 문자를 받는 변수
    VWORD VARCHAR2(1);
    -- 모든 레코드 타입을 받는 변수
    VEMP EMPLOYEES%ROWTYPE;
    -- CURSOR = ARRAY LIST
    CURSOR C1 (VWORD VARCHAR2)
    IS
    SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, JOB_ID FROM EMPLOYEES
    WHERE FIRST_NAME LIKE '%'||VWORD||'%';
BEGIN
    -- 임의문자 추출하고, 출력
    VWORD := DBMS_RANDOM.STRING('a',1);
    DBMS_OUTPUT.PUT_LINE('랜덤 문자: '|| VWORD);
    OPEN C1(VWORD);
    LOOP
        FETCH C1 INTO VEMP.EMPLOYEE_ID, VEMP.FIRST_NAME, VEMP.SALARY, VEMP.JOB_ID;
        -- C1 ROWCOUNT CHECK
        IF C1%ROWCOUNT = 0 THEN
            DBMS_OUTPUT.PUT_LINE('해당되는 직원이 없습니다.');  
        END IF;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID= '|| VEMP.EMPLOYEE_ID || ' FIRST_NAME= '|| VEMP.FIRST_NAME ||
        ' SALARY= '|| VEMP.SALARY);
    END LOOP;
END;
/
EXECUTE EMP_PROCEDURE;

-- PROCEDURE 프로그램 코드 확인
SELECT * FROM USER_SOURCE;

-- 매개변수가 있는 PROCEDURE
CREATE OR REPLACE PROCEDURE EMP_PROCEDURE2(VWORD IN VARCHAR2)
IS
    VCOUNT NUMBER:=0; 
    FLAG BOOLEAN := FALSE;
   -- 모든 레코드 타입을 받는 변수
   VEMP EMPLOYEES%ROWTYPE;
   -- 커서 = ARRAY LIST
   CURSOR C1
   IS
   SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES WHERE FIRST_NAME LIKE '%'||VWORD||'%';
BEGIN
    DBMS_OUTPUT.PUT_LINE('입력된 문자' || VWORD); 
    -- 먼저 데이터 유무 확인
   SELECT COUNT(*) INTO VCOUNT FROM EMPLOYEES WHERE FIRST_NAME LIKE '%'||VWORD||'%';
   IF VCOUNT = 0 THEN
      DBMS_OUTPUT.PUT_LINE('데이터가 존재하지 않습니다.');
   ELSE
      -- 커서 FOR LOOP 사용 (더 안전하고 간단)
      FOR VEMP IN C1 LOOP
        FLAG := TRUE;
        DBMS_OUTPUT.PUT_LINE('ID=' || VEMP.EMPLOYEE_ID || 'FIRST_NAME=' || VEMP.FIRST_NAME);
      END LOOP;
      
      IF FLAG = FALSE THEN
        DBMS_OUTPUT.PUT_LINE('데이터가 존재하지 않습니다.');
      END IF;
   END IF;
END;
/
SHOW ERROR;
EXECUTE EMP_PROCEDURE2('1');

-- DEPT01 새로운 부서를 프로시저를 이용해서 입력하고, 전체를 출력하는 프로그램을 작성하시오. 
CREATE OR REPLACE PROCEDURE DEPT_INSERT(
    DEPT_NO IN DEPT01.DEPARTMENT_ID%TYPE,
    DEPT_NAME IN DEPT01.DEPARTMENT_NAME%TYPE,
    DEPT_MANAGER IN DEPT01.MANAGER_ID%TYPE,
    DEPT_LOCATION IN DEPT01.LOCATION_ID%TYPE
)
IS
BEGIN
    INSERT INTO DEPT01 VALUES(DEPT_NO, DEPT_NAME, DEPT_MANAGER, DEPT_LOCATION);
    COMMIT;
    FOR VDEPT IN (SELECT * FROM DEPT01) LOOP
        DBMS_OUTPUT.PUT_LINE('ID= ' || VDEPT.DEPARTMENT_ID || ' NAME= ' || VDEPT.DEPARTMENT_NAME);
    END LOOP;
END;
/
SELECT *  FROM DEPT01;
EXECUTE DEPT_INSERT(300,'IT_DEV',NULL,3000);

-- DEPT01 프로시저를 이용해서 새로운 부서 내용을 입력하고자 한다. 없는 부서이면 INSERT, 
-- 있는 부서이면 UPDATE, 그리고 해당 부서를 출력하시오.
CREATE OR REPLACE PROCEDURE DEPT_INSERT_UPDATE(
    DEPT_NO IN DEPT01.DEPARTMENT_ID%TYPE,
    DEPT_NAME IN DEPT01.DEPARTMENT_NAME%TYPE,
    DEPT_MANAGER IN DEPT01.MANAGER_ID%TYPE,
    DEPT_LOCATION IN DEPT01.LOCATION_ID%TYPE
)
IS
    VCOUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO VCOUNT FROM DEPT01 WHERE DEPARTMENT_ID = DEPT_NO;
    IF VCOUNT = 0 THEN
        INSERT INTO DEPT01 VALUES(DEPT_NO, DEPT_NAME, DEPT_MANAGER, DEPT_LOCATION);
    ELSE
        UPDATE DEPT01 SET DEPARTMENT_NAME = DEPT_NAME, MANAGER_ID = DEPT_MANAGER,
        LOCATION_ID = DEPT_LOCATION 
        WHERE DEPARTMENT_ID = DEPT_NO;
    END IF;
    COMMIT;
    FOR VDEPT IN (SELECT * FROM DEPT01) LOOP
        DBMS_OUTPUT.PUT_LINE('ID= ' || VDEPT.DEPARTMENT_ID || ' NAME= ' || VDEPT.DEPARTMENT_NAME
        || ' MANAGER = ' || VDEPT.MANAGER_ID || ' LOCATION_ID = ' || VDEPT.LOCATION_ID);
    END LOOP;
END;
/
SELECT *  FROM DEPT01;
EXECUTE DEPT_INSERT_UPDATE(400,'IT_DEVELOPMENT',NULL,3000);
DELETE FROM DEPT01 WHERE DEPARTMENT_ID = 400;

-- EMPLOYEES 에서 해당아이디를 입력하면 이름, 월급, 근무내용을 리턴하는 프로시저를 작성하시오.
CREATE OR REPLACE PROCEDURE DEPT_OUTMODE(
    DEPT_NO IN DEPT01.DEPARTMENT_ID%TYPE,
    DEPT_NAME OUT DEPT01.DEPARTMENT_NAME%TYPE,
    DEPT_MANAGER OUT DEPT01.MANAGER_ID%TYPE,
    DEPT_LOCATION OUT DEPT01.LOCATION_ID%TYPE
)
IS
BEGIN
    SELECT DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID INTO DEPT_NAME, DEPT_MANAGER, 
    DEPT_LOCATION FROM DEPT01 WHERE DEPARTMENT_ID = DEPT_NO;    
END;
/

DECLARE
    VEMP DEPT01%ROWTYPE;
BEGIN
    DEPT_OUTMODE(20, VEMP.DEPARTMENT_NAME, VEMP.MANAGER_ID, VEMP.LOCATION_ID);
    DBMS_OUTPUT.PUT_LINE(' NAME= ' || VEMP.DEPARTMENT_NAME || ' MANAGER = ' || 
    VEMP.MANAGER_ID || ' LOCATION_ID = ' || VEMP.LOCATION_ID);
END;
/
SELECT * FROM DEPT01;
VARIABLE NAME VARCHAR2(20);
VARIABLE MANAGER NUMBER;
VARIABLE LOCATION NUMBER;
EXECUTE DEPT_OUTMODE(20, :NAME, :MANAGER, :LOCATION);
PRINT NAME 
PRINT MANAGER
PRINT LOCATION;

-- IN OUT MODE 테스트하기
CREATE OR REPLACE PROCEDURE PROC_INOUTMODE (V_SAL IN OUT VARCHAR2)
IS BEGIN
V_SAL := '$' || SUBSTR(V_SAL, -9, 3) ||  ',' || SUBSTR(V_SAL, -6, 3) || ',' || SUBSTR(V_SAL, -3, 3); 
END PROC_INOUTMODE;
/
DECLARE
    STRNUM VARCHAR2(20) := '123456789';
BEGIN
    PROC_INOUTMODE(STRNUM);
    DBMS_OUTPUT.PUT_LINE('STRNUM = ' || STRNUM);
END;
/
SHOW ERROR;

-- 트리거에서 꼭 기억해야 될 것
-- INSERT 입력된 컬럼 값은: NEW,
-- DELETE 삭제되는 컬럼 값은: OLD,
-- UPDATE 변겅 전 컬럼 값은 : OLD 수정할 새로운 데이터값 : NEW
DROP TABLE EMP02;
CREATE TABLE EMP02(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(20),
    JOB VARCHAR2(50)
);
DESC EMP02;
-- TRIGGER 설정 EMP02 테이블에 INSERT가 발생하면 입력되었다는 메세지를 출력하시오.
CREATE OR REPLACE TRIGGER EMP02_TRG01
AFTER INSERT ON EMP02
BEGIN 
    DBMS_OUTPUT.PUT_LINE('신입사원이 입사했습니다.');
END;
/
INSERT INTO EMP02 VALUES(1,'개발부','연구원');
SELECT * FROM EMP02;

-- EMP01에 신입사원이 등록이 되면, SAL01 신입사원 사원번호, 기본월급 2000000 입력하시오.
-- SAL01.SALNO SEQUENCE NUMBER 이용해서 자동으로 증가해서 등록하도록 프로그램할 것.
DROP TRIGGER EMP01_TRG02;
CREATE OR REPLACE TRIGGER EMP01_TRG02
AFTER INSERT ON EMP01
FOR EACH ROW 
BEGIN
    INSERT INTO SAL01 VALUES(SAL01_SEQ.NEXTVAL, 2000000, :NEW.EMPLOYEE_ID);
    DBMS_OUTPUT.PUT_LINE('신입사원이 입사하여 봉급테이블에 새로 등록했습니다.');
END;
/
DROP TABLE SAL01;
CREATE TABLE SAL01(
    SALNO NUMBER(4),
    SAL NUMBER,
    EMPNO NUMBER(4),
    CONSTRAINT SAL01_PK PRIMARY KEY(SALNO)
);
SELECT * FROM SAL01;
SELECT * FROM EMP01;
SELECT * FROM USER_CONS_COLUMNS WHERE TABLE_NAME = 'EMP01';
ALTER TABLE EMP01 ADD CONSTRAINT EMP01_PK PRIMARY KEY(EMPLOYEE_ID);
CREATE SEQUENCE SAL01_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 100
NOCYCLE
CACHE 2;
INSERT INTO EMP01 VALUES(300, 'DONG', 'KIM', 'KIM', '650.507.9812', '25/06/02', 'IT',
2000, NULL, 124, 50);
INSERT INTO EMP01 VALUES(301, 'DONG', 'KIM', 'KIM', '650.507.9812', '25/06/02', 'IT',
2000, NULL, 124, 50);
SELECT * FROM SAL01;

-- EMP01 300, 301 사원번호를 제거하면 SAL01에도 삭제가 진행이 되도록 트리거 프로그램을 작성하시오.
DROP TRIGGER EMP01_TRG03;
CREATE OR REPLACE TRIGGER EMP01_TRG03
AFTER DELETE ON EMP01
FOR EACH ROW 
BEGIN
    DELETE FROM SAL01 WHERE EMPNO = :OLD.EMPLOYEE_ID;
    DBMS_OUTPUT.PUT_LINE('신입사원이 퇴사하였습니다.');
END;
/
SELECT * FROM SAL01;
DELETE FROM EMP01 WHERE EMPLOYEE_ID IN(300,301);


